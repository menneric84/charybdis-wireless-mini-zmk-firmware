#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"
#include "behaviors.dtsi"
#include "combos.dtsi"
#include <dt-bindings/zmk/pointing.h>

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2 3 4 5 6 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define PHOTOS  5
    // #define EXTRAS  6
    // #define MOUSE   7
    // #define SLOW    8
    // #define SCROLL  9

    behaviors {
        hm_rick: hmrick {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRICK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <175>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
        };

        sticky: sticky {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <10000>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
  &kp Q                  &kp W  &kp E                &kp R                    &kp T            &kp Y               &kp U                     &kp I                   &kp O                     &kp P
  &hm_rick LEFT_SHIFT A  &kp S  &hm_rick LEFT_ALT D  &hm_rick LEFT_CONTROL F  &kp G            &kp H               &hm_rick RIGHT_CONTROL J  &as_ht RIGHT_ALT K      &kp L                     &hm_rick RIGHT_CONTROL SEMI
  &kp Z                  &kp X  &kp C                &kp V                    &kp B            &kp N               &kp M                     &as_ht LS(COMMA) COMMA  &as_ht LS(PERIOD) PERIOD  &kp QUESTION
                                &kp ESCAPE           &lt 2 SPACE              &kp BACKSPACE    &sticky LEFT_SHIFT  &lt 1 ENTER
            >;
        };

        NUM {
            bindings = <
  &as_ht LS(GRAVE) GRAVE  &trans            &trans            &trans                &trans              &trans                                &trans                &trans            &trans                          &as_ht LS(MINUS) MINUS
  &as_ht LS(N1) NUMBER_1  &as_ht LS(N2) N2  &as_ht LS(N3) N3  &as_ht LS(N4) N4      &as_ht LS(N5) N5    &as_ht LS(N6) N6                      &as_ht LS(N7) N7      &as_ht LS(N8) N8  &as_ht LS(N9) N9                &as_ht LS(N0) N0
  &trans                  &trans            &trans            &as_ht LS(LBKT) LBKT  &trans              &as_ht LS(SINGLE_QUOTE) SINGLE_QUOTE  &as_ht LS(RBKT) RBKT  &trans            &as_ht LS(BACKSLASH) BACKSLASH  &as_ht LS(EQUAL) EQUAL
                                            &trans            &trans                &trans              &trans                                &trans
            >;
        };

        NAV {
            bindings = <
  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3    &trans          &trans          &trans        &trans     &trans
  &trans          &trans        &studio_unlock  &mkp LCLK     &mkp RCLK       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
  &none           &none         &none           &none         &none           &kp LEFT_WIN    &kp HOME        &kp PG_DN     &kp PG_UP  &kp END
                                &none           &trans        &trans          &trans          &trans
            >;
        };

        SYM {
            bindings = <
  &none  &none  &none   &none   &none     &kp ASTRK    &kp AMPS        &kp LEFT_BRACE  &kp DLLR  &td_grave
  &none  &none  &none   &trans  &none     &td_hyphen   &kp SEMICOLON   &kp LPAR        &kp LBKT  &kp PLUS
  &none  &none  &none   &none   &none     &kp AT_SIGN  &kp UNDERSCORE  &kp LT          &kp HASH  &kp PRCNT
                &trans  &trans  &trans    &trans       &trans
            >;
        };

        GAME {
            bindings = <
  &kp TAB    &kp Q  &kp W  &kp E      &kp R           &none  &none  &none  &none  &none
  &kp LCTRL  &kp A  &kp S  &kp D      &kp F           &none  &none  &none  &none  &none
  &kp LSHFT  &kp Z  &kp X  &kp C      &kp V           &none  &none  &none  &none  &none
                    &none  &kp SPACE  &kp LEFT_ALT    &none  &none
            >;
        };

        PHOTOS {
            bindings = <
  &kp LA(LC(LS(Z)))  &kp LA(LC(LS(E)))  &kp LA(LC(LS(A)))  &kp LA(LC(LS(S)))  &kp LA(LC(LS(B)))    &none   &none   &none  &none  &none
  &kp LEFT           &kp DOWN           &kp UP             &kp RIGHT          &kp LCTRL            &none   &none   &none  &none  &none
  &kp LA(LS(A))      &kp LA(KP_N1)      &kp LA(KP_N2)      &kp LA(KP_N3)      &none                &none   &none   &none  &none  &none
                                        &trans             &trans             &trans               &trans  &trans
            >;
        };

        EXTRAS {
            bindings = <
  &shrug  &lgtm  &gcm   &none  &kp C_BRIGHTNESS_INC    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3     &out OUT_TOG
  &sudo   &none  &none  &none  &kp C_BRIGHTNESS_DEC    &none         &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_STOP       &kp C_NEXT
  &none   &none  &none  &none  &none                   &new_dir      &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PRINTSCREEN
                 &none  &none  &none                   &none         &none
            >;
        };

        MOUSE {
            bindings = <
  &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none       &none            &none      &none         &none
  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none       &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LCMD
  &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none       &none            &none      &none         &none
                                  &trans          &trans           &trans             &kp RETURN  &trans
            >;
        };

        SLOW {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
